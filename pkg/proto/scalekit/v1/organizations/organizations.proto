syntax = "proto3";

package scalekit.v1.organizations;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "scalekit/v1/commons/commons.proto";
import "scalekit/v1/options/options.proto";

option go_package = "github.com/scalekit-inc/scalekit/pkg/grpc/organizations";

service OrganizationService {
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};

    option (google.api.http) = {
      post: "/api/v1/organizations"
      body: "organization"
    };
  }
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};

    option (google.api.http) = {
      patch: "/api/v1/organizations/{id}"
      body: "organization"
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: CUSTOMER_PORTAL_SESSION_CLIENT};
    option (google.api.http) = {get: "/api/v1/organizations/{id}"};
  }

  rpc ListOrganization(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};
    option (google.api.http) = {get: "/api/v1/organizations"};
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (google.protobuf.Empty) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};
    option (google.api.http) = {
      delete: "/api/v1/organizations/{id}"
      additional_bindings: [
        {delete: "/api/v1/organizations/-"}]
    };
  }

  rpc GenerateCustomerPortalLink(CustomerPortalLinkRequest) returns (CustomerPortalLinksResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};
    option (google.api.http) = {put: "/api/v1/organizations/{id}/portal_links"};
  }

  rpc DeleteCustomerPortalLink(CustomerPortalLinkRequest) returns (google.protobuf.Empty) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};
    option (google.api.http) = {delete: "/api/v1/organizations/{id}/portal_links"};
  }

  rpc GetCustomerPortalLink(CustomerPortalLinkRequest) returns (CustomerPortalLinksResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION_CLIENT};
    option (google.api.http) = {get: "/api/v1/organizations/{id}/portal_links"};
  }
}

message CreateOrganizationRequest {
  CreateOrganization organization = 1 [(buf.validate.field).required = true];
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message CreateOrganization {
  string display_name = 4 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 200
  }];
  scalekit.v1.commons.RegionCode region_code = 5;
  optional string external_id = 6;
  map<string, string> metadata = 7 [(buf.validate.field).map = {
    max_pairs: 10,
    keys: {
      string: {
        min_len: 3
        max_len: 25
      }
    }
    values: {
      string: {
        min_len: 1
        max_len: 256
      }
    }
  }];
}

message Organization {
  string id = 1;
  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Timestamp update_time = 3;
  string display_name = 4 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 200
  }];
  scalekit.v1.commons.RegionCode region_code = 5;
  optional string external_id = 6;
  map<string, string> metadata = 7 [(buf.validate.field).map = {
    max_pairs: 10,
    keys: {
      string: {
        min_len: 3
        max_len: 25
      }
    }
    values: {
      string: {
        min_len: 1
        max_len: 256
      }
    }
  }];
}

message UpdateOrganizationRequest {
  oneof identities {
    string id = 1 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 32
    }];
    string external_id = 2;
  }
  UpdateOrganization organization = 3 [(buf.validate.field).required = true];
  google.protobuf.FieldMask update_mask = 99;
}

// For update messages ensure the indexes are same as the base model itself.
message UpdateOrganization {
  optional string display_name = 4 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 200
  }];
  reserved 5; //region is not updatable here.
  optional string external_id = 6;
  map<string, string> metadata = 7 [(buf.validate.field).map = {
    max_pairs: 10,
    keys: {
      string: {
        min_len: 3
        max_len: 25
      }
    }
    values: {
      string: {
        min_len: 1
        max_len: 256
      }
    }
  }];
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  oneof identities {
    string id = 1 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 32
    }];
    string external_id = 2;
  }
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  uint32 page_size = 1;
  string page_token = 2;
}

message ListOrganizationsResponse {
  string next_page_token = 1;
  uint32 total_size = 2;
  repeated Organization organizations = 3;
}

message DeleteOrganizationRequest {
  oneof identities {
    string id = 1 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 32
    }];
    string external_id = 2;
  }
}

message CustomerPortalLinkRequest {
  string id = 1;
}

message Link {
  string id = 1;
  string location = 2;
  google.protobuf.Timestamp expire_time = 3;
}

message CustomerPortalLinksResponse {
  repeated Link links = 1;
}
